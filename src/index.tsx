import './styles/index.scss';

import {
  ApolloClient,
  ApolloLink,
  ApolloProvider,
  createHttpLink,
  InMemoryCache
} from '@apollo/client';
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router } from 'react-router-dom';

import ApplicationContainer from './components/application/ApplicationContainer';
import reportWebVitals from './reportWebVitals';

// TODO: See if there is a need to abstract this away into a Constants file.
const backendUrl = process.env.REACT_APP_BACKEND_URL;

const httpLink = createHttpLink({
  uri: backendUrl,
  credentials: 'include'
});

const link = ApolloLink.from([httpLink]);

const client = new ApolloClient({
  link,
  cache: new InMemoryCache({
    typePolicies: {
      Note: {
        fields: {
          blocks: {
            /**
             * We merge the blocks field here as the block id is a unique string
             * generated by the frontend, which is then passed as a String! to MongoDB
             * instead of using MongoDB's ID! type. Thus GraphQL cannot uniquely identify
             * blocks when merging, and we have to do it manually here.
             *
             * TODO: See if we can use MongoDB's ID field instead.
             */
            merge: false // Short form for always preferring incoming over existing data.
          }
        }
      }
    }
  })
});

ReactDOM.render(
  <React.StrictMode>
    <ApolloProvider client={client}>
      <Router>
        <ApplicationContainer />
      </Router>
    </ApolloProvider>
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
